<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenID Connect on Cyb3rh4ck¬¥s dev life</title><link>https://cyb3rh4ck.github.io/tags/openid-connect/</link><description>Recent content in OpenID Connect on Cyb3rh4ck¬¥s dev life</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 08 Aug 2025 11:45:21 -0600</lastBuildDate><atom:link href="https://cyb3rh4ck.github.io/tags/openid-connect/index.xml" rel="self" type="application/rss+xml"/><item><title>Cap√≠tulo 1 ‚Äì Principios de Autenticaci√≥n Moderna y Gesti√≥n de Identidades</title><link>https://cyb3rh4ck.github.io/keycloak/capitulo1/</link><pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate><guid>https://cyb3rh4ck.github.io/keycloak/capitulo1/</guid><description>&lt;h1 id="-cap√≠tulo-1--principios-de-autenticaci√≥n-moderna-y-gesti√≥n-de-identidades">üìö Cap√≠tulo 1 ‚Äì Principios de Autenticaci√≥n Moderna y Gesti√≥n de Identidades&lt;/h1>
&lt;h2 id="11-evoluci√≥n-de-la-autenticaci√≥n-y-autorizaci√≥n">1.1 Evoluci√≥n de la Autenticaci√≥n y Autorizaci√≥n&lt;/h2>
&lt;p>En sus inicios, la autenticaci√≥n consist√≠a simplemente en verificar un &lt;strong>nombre de usuario&lt;/strong> y &lt;strong>contrase√±a&lt;/strong> contra una base de datos local.&lt;br>
A medida que las aplicaciones comenzaron a distribuirse y los usuarios accedieron desde diferentes ubicaciones y dispositivos, surgi√≥ la necesidad de &lt;strong>protocolos m√°s seguros y escalables&lt;/strong>.&lt;/p>
&lt;p>La &lt;strong>autorizaci√≥n&lt;/strong> ‚Äîel proceso de determinar qu√© puede hacer un usuario una vez autenticado‚Äî tambi√©n evolucion√≥.&lt;br>
Se pas√≥ de &lt;strong>listas de control de acceso est√°ticas&lt;/strong> a modelos m√°s din√°micos como:&lt;/p></description></item><item><title>Cap√≠tulo 2 ‚Äì An√°lisis Profundo de la Arquitectura de Keycloak</title><link>https://cyb3rh4ck.github.io/keycloak/capitulo2/</link><pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate><guid>https://cyb3rh4ck.github.io/keycloak/capitulo2/</guid><description>&lt;h1 id="-cap√≠tulo-2--an√°lisis-profundo-de-la-arquitectura-de-keycloak">üõ†Ô∏è Cap√≠tulo 2 ‚Äì An√°lisis Profundo de la Arquitectura de Keycloak&lt;/h1>
&lt;h2 id="21-arquitectura-del-sistema-keycloak">2.1 Arquitectura del Sistema Keycloak&lt;/h2>
&lt;p>Keycloak es una soluci√≥n de &lt;strong>gesti√≥n de identidades y accesos (IAM)&lt;/strong> de c√≥digo abierto que soporta &lt;strong>SSO&lt;/strong>, &lt;strong>MFA&lt;/strong>, integraci√≥n con &lt;strong>LDAP/AD&lt;/strong>, y protocolos como &lt;strong>OAuth 2.0&lt;/strong>, &lt;strong>OpenID Connect&lt;/strong> y &lt;strong>SAML&lt;/strong>.&lt;br>
Su arquitectura est√° basada en:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Core Server:&lt;/strong> motor que maneja autenticaci√≥n, autorizaci√≥n y federaci√≥n de identidades.&lt;/li>
&lt;li>&lt;strong>Admin Console:&lt;/strong> interfaz web para configuraci√≥n y administraci√≥n.&lt;/li>
&lt;li>&lt;strong>Account Console:&lt;/strong> portal de autoservicio para usuarios finales.&lt;/li>
&lt;li>&lt;strong>Base de datos persistente:&lt;/strong> almacena configuraciones, usuarios, sesiones y tokens.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="22-modelos-de-realm-cliente-y-usuario">2.2 Modelos de Realm, Cliente y Usuario&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Realm:&lt;/strong> entorno de seguridad aislado; cada realm administra usuarios, credenciales, roles y grupos de forma independiente.&lt;/li>
&lt;li>&lt;strong>Cliente:&lt;/strong> aplicaci√≥n o servicio registrado en Keycloak para autenticaci√≥n/autorizaci√≥n.&lt;/li>
&lt;li>&lt;strong>Usuario:&lt;/strong> identidad gestionada dentro de un realm.&lt;/li>
&lt;/ul>
&lt;p>Un realm puede contener m√∫ltiples clientes, y un cliente puede acceder a varios flujos de autenticaci√≥n configurados.&lt;/p></description></item></channel></rss>